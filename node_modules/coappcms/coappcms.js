// Since I can't write in coffee-script, I created this in javascript, and 
// just pass the work along to it.

var querystring = require("querystring");
var md5 = require('MD5');
var http = require('http');
var util= require('util');
var enumerabl=require("enumerable"); 
var spawn = require('child_process').spawn;
var ejs= require("ejs");
var gfm = require("github-flavored-markdown");
var fs = require('fs');
var path = require('path');

var cms= {};

if (typeof exports === "object") {
    cms = exports;
    cms.config = null;
    cms.cache = {};
        
    cms.setConfig = function( config ) {
        cms.config = config;
    }
    
    /// Our cms.include function acts as a <>.html.md.ejs filter.
    cms.include = function(file, templateData) {
        file = path.join( cms.config.includePath , file );
        if( path.existsSync(file) ) {
            var filecontent = fs.readFileSync(file,encoding='utf8');
            filecontent = ejs.render(filecontent, templateData);
            return cms.markdown(filecontent);
        }
        return "INCLUDE FAIL: ["+file+"] does not exist";
    };
    
    cms.markdown = function( filecontent ) {
        // [text](docref) 
        // gotta think about this some more...
        /*
        var possibleMatches = {};
        var match = null;
        while( (match = /\[(.*?)\]\((.*?)\)/gi.exec( filecontent ) ) != null ) {
            var hash = md5(match[0]);
            possibleMatches[hash] = match;
            filecontent = filecontent.replace( match[0], "$$-"+hash+"--$$"); 
        } 
        
        for(var hash in possibleMatches) {
            var match = possibleMatches[hash];
            if( cms.config.docrefs != "undefined" && cms.config.docrefs[match[2]] != "undefined"  ) {
                filecontent = filecontent.replace(  "$$-"+hash+"--$$", "["+match[1]+"]("+config.docrefs[match[2]]+")" );
            } else {
                filecontent = filecontent.replace(  "$$-"+hash+"--$$", match[0] );
            }
            
        }
        */
        
        // handle my custom anchors
        // [text](!id)
        filecontent = filecontent.replace(/\[(.*?)\]\(\!(.*?)\)/gi , '<a id="$2" href="#$2">$1</a>' );
        
        // handle my custom image inserts
        // @[text](url)
        filecontent = filecontent.replace(/@\[(.*?)\]\((.*?)\)/gi , '<p style="background:none repeat scroll 0 0; padding:0.4em; margin-bottom:0.6em; overflow:auto; -moz-border-radius:6px; -webkit-border-radius:6px; border-radius:6px;"><img src="$2" title="$1" alt="$1" /></p>' );
        
        // handle my custom video inserts
        // %[width,height,posterimageurl,mp4url,webmurl]
        filecontent = filecontent.replace(/%\[\s*(.*)\s*,\s*(.*)\s*,\s*(.*)\s*,\s*(.*)\s*,\s*(.*)\s*\]/gi, 
        '<video width="$1" height="$2" poster="$3" controls="controls" preload="none">' +
        '    <source type="video/mp4" src="$4" />' +
        '    <source type="video/webm" src="$5" />' + 
        '    <object width="$1" height="$2" type="application/x-shockwave-flash" data="/scripts/flashmediaelement.swf">' + 
        '        <param name="movie" value="/scripts/flashmediaelement.swf" />' +
        '        <param name="flashvars" value="controls=true&file=$4" />' + 
        '        <!-- Image as a last resort -->' +
        '        <img src="$3" width="$1" height="$2" title="No video playback capabilities" />' +
        '    </object>'+ 
        '</video>');
        
        
        filecontent = gfm.parse( filecontent );
        
        return filecontent.replace(" @", "@");
    }
    
    cms.render = function (config, inExtension,outExtension,templateData,file, next) {
        if( inExtension != 'md' && inExtension != 'markdown' )  {
          return next();
        }
        
        var piggybacks = {};
        var match = null;
        
        if( (match = /^```\s*(.*)\s*$([\s|\S]*?)^```$/img.exec(file.content)) != null ) { 
            do {
                var lang = RegExp.$1;
                var src = RegExp.$2;
                var key = "«--CODE:"+md5(src)+"--»";
                
                file.content = file.content.replace( match[0], key );
            
                var pb_match = null;
                while((pb_match = /«(.*?)«(.*?)»/ig.exec(src)) != null)  {
                    var a_code = RegExp.$1;
                    var a_href = RegExp.$2;
                    var hash = md5(a_href);
                    src = src.replace(pb_match[0] , "«"+a_code+"»"+hash+"»" );
                    piggybacks[hash] = a_href;
                }
                
                completeHighlight( file,key, lang, src, next, piggybacks);
            } while( (match = /^```\s*(.*)\s*$([\s|\S]*?)^```$/img.exec(file.content)) != null )
        } else { 
            // console.log(file.content);
            file.content = cms.markdown(file.content);
            next();
        }
    };
  
    function completeHighlight(file, key, language, src, next, piggybacks) {
        var text = '';
        
        if( undefined != cms.cache[key] ) {
            // we've got the result from this cached in memory from a previous run
            // let's just skip to the end :)
            text = cms.cache[key];
            return reallyCompleteHighlight(file, key, text, next, piggybacks);
        }
        
        var req = http.request({ host: "pygments.appspot.com", port: 80, path: '', method: 'POST' }, function(response) {
            response.setEncoding('utf8');
            
            response.on('data', function (chunk) {
                text += chunk;
            });
            
            response.on('end', function() {
                cms.cache[key] = text;
                return reallyCompleteHighlight(file, key, text, next, piggybacks);
            });
        });
        req.write(querystring.stringify({lang:language, code:src}));
        req.end();
    }
  
    function reallyCompleteHighlight(file, key, text, next, piggybacks) {
        // find our piggybacks in text and restore them as links
        for(ndx in piggybacks) { 
            text = text.replace( new RegExp("«([\\s|\\S]*?)»"+ndx+"»", "ig" ), '<a class="lnk" href="'+piggybacks[ndx]+'">$1</a>' );
        }
                
        file.content = file.content.replace(key , text );
        if( /«--CODE:.{32}--»/.exec(file.content) == null) {
            
            if( cms.cache[file.content] == undefined ) { 
                cms.cache[file.content] = cms.markdown(file.content);
            }
            
            file.content = cms.markdown(file.content);
            next();
        }
    }
    
    cms.generateBefore = function(config, next) {
      // console.log("generateBefore");
      next();
    };
    cms.generateAfter = function(config, next) {
      // console.log("generateAfter");
      next();
    };
    
    cms.cleanBefore = function(config, next) {
      // console.log("cleanBefore");
      next();
    };
    cms.cleanAfter = function(config, next) {
      // console.log("cleanAfter");
      next();
    };
    
    cms.parseBefore = function(config, next) {
      // console.log("parseBefore");
      next();
    };
    cms.parseAfter = function(config, next) {
      // run thru the documents and get the 
        
        // console.log("parseAfter");
        /*
        if (cms.xxx == 0 ) {
            console.log( util.inspect(config));
            cms.xxx++;
        }
        */
      next();
    };
    
    //cms.xxx = 0;
    
    cms.renderBefore = function(config, templateData, next) {
        var docs = enumerabl.create( templateData.documents );
        templateData.docrefs = {};
            
        docs.each( function(e) { 
            var d =/^(\d{4})-(\d{1,2})-(\d{1,2})/.exec(e.filename);
            if( d ) {
                e.date = new Date( RegExp.$1, --(RegExp.$2), RegExp.$3);
            }   
            e.order = e.order || 0;
            
            // set the docrefs 
            if ( e.id != undefined  ) {
                templateData.docrefs["id"] = e;
            }
            
        });
        next();
    };
    cms.renderAfter = function(config, next) {
    //  console.log("renderAfter");
      next();
    };
    
    cms.writeBefore = function(config, next) {
    //console.log("writeBefore");
      next();
    };
    cms.writeAfter = function(config, next) {
    //  console.log("writeAfter");
        //console.log(util.inspect(config) );
        if( config.docpad.config.sound == 'true' ) {
            grep  = spawn('cscript', ["//e:jscript","tools\\js.js","Speech.PlaySound('"+config.docpad.config.rootPath+"\\tools\\sound2.wav');"]);
        }
      next();
    };
    
    cms.serverBefore = function(config, next) {
    //  console.log("serverBefore");
      next();
    };
    cms.serverAfter = function(config, next) {
    //  console.log("serverAfter");
      next();
    };
}
